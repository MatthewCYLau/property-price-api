name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: open-source-apps-001
  API_IMAGE: property-price-api
  INGEST_IMAGE: property-price-ingest
  REGISTRY_HOSTNAME: gcr.io
  CLOUD_RUN_SERVICE: property-price-api
  INGEST_CLOUD_RUN_SERVICE: property-price-ingest
  NUGET_DIRECTORY: ${{ github.workspace}}/nuget

jobs:
  build-pack:
    runs-on: ubuntu-latest
    env:
      COSMOS_DB_CONNECTION_STRING: "${{ secrets.COSMOS_DB_CONNECTION_STRING }}"
    strategy:
      matrix:
        dotnet-version: ["8.0.x"]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build
      - name: Test
        run: dotnet test
      - name: Pack the NuGet package
        run: dotnet pack -c Release --output ${{ env.NUGET_DIRECTORY }}
      - name: Publish NuGet package
        run: |
          for file in $(find ${{ env.NUGET_DIRECTORY }} -type f -name "*.nupkg"); do
              dotnet nuget push "$file" --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          done
  build-test:
    runs-on: ubuntu-latest
    env:
      COSMOS_DB_CONNECTION_STRING: "${{ secrets.COSMOS_DB_CONNECTION_STRING }}"
    strategy:
      matrix:
        dotnet-version: ["7.0.x", "8.0.x"]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build
      - name: Test
        run: dotnet test /p:CollectCoverage=true
  node-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18]
    name: Node ${{ matrix.node }} tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Run Newman CLI tests
        run: |
          node -v
          npm i -g newman
          newman run collections/cosmos-service-regression-tests.postman_collection.json \
          -e collections/azure-container-apps_postman_environment.json
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"
      - name: Authenticate with Container Registry
        run: |
          gcloud --quiet auth configure-docker
      # Build the API Docker image
      - name: Build API
        run: |-
          cd property-price-api
          docker build -t \
          "$REGISTRY_HOSTNAME/$PROJECT_ID/$API_IMAGE:$GITHUB_SHA" -t \
          "$REGISTRY_HOSTNAME/$PROJECT_ID/$API_IMAGE:latest" .
          cd ..
      # Push the Docker image to Google Container Registry
      - name: Push
        run: |
          cd property-price-api
          docker push "$REGISTRY_HOSTNAME/$PROJECT_ID/$API_IMAGE:$GITHUB_SHA" 
          docker push "$REGISTRY_HOSTNAME"/$PROJECT_ID/"$API_IMAGE":latest
          cd ..
      # Build the ingest engine Docker image
      - name: Build ingest engine
        run: |-
          docker build -f property-price-ingest/Dockerfile -t \
          "$REGISTRY_HOSTNAME/$PROJECT_ID/$INGEST_IMAGE:$GITHUB_SHA" -t \
          "$REGISTRY_HOSTNAME/$PROJECT_ID/$INGEST_IMAGE:latest" .
      # Push the ingest engine Docker image to Google Container Registry
      - name: Push
        run: |
          docker push "$REGISTRY_HOSTNAME/$PROJECT_ID/$INGEST_IMAGE:$GITHUB_SHA" 
          docker push "$REGISTRY_HOSTNAME"/$PROJECT_ID/"$INGEST_IMAGE":latest
      - name: Deploy
        run: |
          gcloud run deploy ${CLOUD_RUN_SERVICE} --image "$REGISTRY_HOSTNAME/$PROJECT_ID/$API_IMAGE:$GITHUB_SHA" --region europe-west1 \
          --update-secrets=MONGO_DB_CONNECTION_STRING=property-price-api-mongo-db-connection-string:latest\
          ,JWT_SECRET=jwt-secret:latest
          gcloud run deploy ${INGEST_CLOUD_RUN_SERVICE} --image "$REGISTRY_HOSTNAME/$PROJECT_ID/$INGEST_IMAGE:$GITHUB_SHA" --region europe-west1 \
          --update-secrets=MONGO_DB_CONNECTION_STRING=property-price-api-mongo-db-connection-string:latest
